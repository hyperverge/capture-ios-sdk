// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HyperSnapSDK
import AVFoundation
import Accelerate
import AudioToolbox
import CommonCrypto
import CoreLocation
import Dispatch
import Foundation
@_exported import HyperSnapSDK
import ImageIO
import MobileCoreServices
import ObjectiveC
import Security
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import _Concurrency
@objc @_Concurrency.MainActor(unsafe) open class HVDocsViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vcNew: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, hvDocConfig: HyperSnapSDK.HVDocConfig, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ viewController: UIKit.UIViewController) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setHVDocConfig(_ hvDocConfig: HyperSnapSDK.HVDocConfig)
  @objc deinit
}
extension HyperSnapSDK.HVDocsViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HVFaceViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vc: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, hvFaceConfig: HyperSnapSDK.HVFaceConfig, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ viewController: UIKit.UIViewController) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setHVFaceConfig(_ hvFaceConfig: HyperSnapSDK.HVFaceConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVSessionResponse : ObjectiveC.NSObject {
  @objc public var hvError: HyperSnapSDK.HVError? {
    get
  }
  @objc public func isSuccess() -> Swift.Bool
  @objc public func getHVError() -> HyperSnapSDK.HVError?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HVBaseConfig : ObjectiveC.NSObject {
  public var showTrustLogos: Swift.Bool
  public var shouldShowCloseAlert: Swift.Bool
  @objc public func setShowTrustLogos(_ shouldShow: Swift.Bool)
  @objc public func setShouldShowCloseAlert(_ show: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyperSnapSDKConfig : ObjectiveC.NSObject {
  @objc public static func initialize(appId: Swift.String, appKey: Swift.String, region: HyperSnapSDK.HyperSnapParams.Region)
  @objc public static func initialize(appId: Swift.String, accessToken: Swift.String, region: HyperSnapSDK.HyperSnapParams.Region)
  @objc public static func setShouldUseSignature(_ shouldUseSignature: Swift.Bool)
  @objc public static func setShouldEnableSSLPinning(_ shouldEnableSSLPinning: Swift.Bool)
  @objc public static func setShouldUseAnalytics(_ shouldUse: Swift.Bool)
  @objc public static func setTimeoutIntervalForRequest(_ timeout: Swift.Double)
  @objc public static func setBrandingCheck(_ shouldCheck: Swift.Bool, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void)
  @objc public static func setShouldReturnRawResponse(_ shouldReturn: Swift.Bool)
  @objc public static func deleteImageAtUri(_ imageUri: Swift.String)
  @objc public static func sortDictionaryAlphabetically(_ dictionary: [Swift.String : Swift.AnyObject]) -> Swift.String
  @objc public static func startUserSession(_ transactionId: Swift.String? = nil) -> HyperSnapSDK.HVSessionResponse
  @objc public static func endUserSession()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyperSnapParams : ObjectiveC.NSObject {
  @objc public enum DocumentType : Swift.Int {
    case card
    case a4
    case passport
    case other
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Region : Swift.Int {
    case AsiaPacific
    case UnitedStates
    case India
    case Africa
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Product : Swift.Int {
    case faceID
    case IAM
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LivenessMode : Swift.Int {
    case none
    case textureLiveness
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum FaceMatchMode : Swift.Int {
    case Face_Id
    case Face_Face
    case Face_IdFaceString
    case Generic
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HVFaceInstructionsViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vc: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func setHVFaceConfig(_ hvFaceConfig: HyperSnapSDK.HVFaceConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HVError : ObjectiveC.NSObject {
  public var errorMessage: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  @objc public func getErrorMessage() -> Swift.String
  @objc public func getErrorCode() -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HVNetworkHelper : ObjectiveC.NSObject {
  @objc public static func makeOCRAPICall(endpoint: Swift.String, documentUri: Swift.String, qrCroppedImageUri: Swift.String? = nil, hvDocConfig: HyperSnapSDK.HVDocConfig? = nil, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeFaceMatchCall(faceUri: Swift.String, documentUri: Swift.String, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeFaceMatchAPICall(endpoint: Swift.String, image1: Swift.String, image2: Swift.String, faceMatchMode: HyperSnapSDK.HyperSnapParams.FaceMatchMode, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeTextMatchAPICall(endpoint: Swift.String, parameters: [Swift.String : Swift.AnyObject], headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class HVBrandingLayout : UIKit.UIStackView {
  @objc @_Concurrency.MainActor(unsafe) public func showBranding(show: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func showTrustLogos(show: Swift.Bool)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVRetakeButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewRetakeButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewContinueButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocPickerScreenButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVInstructionsProceedButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVCameraButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setImageTintColor(_ color: UIKit.UIColor)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVQRSkipButton : UIKit.UIButton {
  @objc @_Concurrency.MainActor(unsafe) required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVTitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVPageNumberLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVSubtitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVFaceDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVFaceInstructionTopLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVFaceInstructionBottomLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocInstructionsLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocSubTextLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDocDescriptionA4Label : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVFaceActivityLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVFaceActivityIndicator : UIKit.UIActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setStyle(_ style: UIKit.UIActivityIndicatorView.Style)
  @objc @_Concurrency.MainActor(unsafe) public static func setColor(_ color: UIKit.UIColor)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVQRDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVFaceConfig : HyperSnapSDK.HVBaseConfig {
  @objc public var textConfig: HyperSnapSDK.HVFaceConfig.FaceTextConfig
  @objc public func setLivenessMode(_ livenessMode: HyperSnapSDK.HyperSnapParams.LivenessMode)
  @objc public func setShouldShowInstructionsPage(_ shouldShow: Swift.Bool)
  @objc public func setLivenessAPIParameters(_ parameters: [Swift.String : Swift.AnyObject])
  @objc public func setLivenessAPIHeaders(_ headers: [Swift.String : Swift.String])
  @objc public func setShouldEnablePadding(_ shouldEnable: Swift.Bool)
  @objc public func setPadding(left: Swift.Float, right: Swift.Float, top: Swift.Float, bottom: Swift.Float)
  @objc public func setLivenessEndpoint(_ endpoint: Swift.String)
  @objc public func setShouldReturnFullImageUri(_ shouldReturn: Swift.Bool)
  @objc public func setShouldHandleRetries(_ shouldHandle: Swift.Bool)
  @objc public func setShouldUseBackCamera(_ shouldUse: Swift.Bool)
  @objc public func setShouldShowCameraSwitchButton(_ shouldShow: Swift.Bool)
  @objc public func setFaceCaptureCircleSuccessColor(_ color: UIKit.UIColor)
  @objc public func setFaceCaptureCircleFailureColor(_ color: UIKit.UIColor)
  @objc public func setShouldShowFullScreenViewController(_ shouldShow: Swift.Bool)
  @objc public func setCustomLoadingScreen(_ vc: UIKit.UIViewController)
  @objc public func setCaptureButtonEnabledImage(_ image: UIKit.UIImage)
  @objc public func setCaptureButtonDisabledImage(_ image: UIKit.UIImage)
  @available(*, deprecated, message: "This function is not necessary anymore")
  @objc public func setNavigationController(_ navVC: UIKit.UINavigationController)
  @objc public func setShouldDismissVCAutomatically(_ shouldDismiss: Swift.Bool)
  @objc public func setShouldRejectFaceNotStraight(_ shouldReject: Swift.Bool)
  @_inheritsConvenienceInitializers @objc public class FaceTextConfig : ObjectiveC.NSObject {
    @objc public func setFaceCaptureTitle(_ text: Swift.String)
    @objc public func setFaceCaptureTitle2(_ text: Swift.String)
    @objc public func setFaceCaptureSubtitle(_ text: Swift.String)
    @objc public func setFaceCaptureMultipleFacesDetectedText(_ text: Swift.String)
    @objc public func setFaceCaptureWrongOrientationText(_ text: Swift.String)
    @objc public func setFaceCaptureFaceFoundText(_ text: Swift.String)
    @objc public func setFaceCaptureLookStraight(_ text: Swift.String)
    @objc public func setFaceCaptureMoveAwayText(_ text: Swift.String)
    @objc public func setFaceCaptureMoveAwayText2(_ text: Swift.String)
    @objc public func setFaceCaptureMoveCloserText(_ text: Swift.String)
    @objc public func setFaceCaptureMoveCloserText2(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundText(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundText2(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundToastText(_ text: Swift.String)
    @objc public func setFaceCaptureActivityText(_ text: Swift.String)
    @objc public func setFaceRetakeButtonText(_ text: Swift.String)
    @objc public func setFaceRetakeTitleText(_ text: Swift.String)
    @objc public func setFaceInstructionsTitle(_ text: Swift.String)
    @objc public func setFaceInstructionsTop1(_ text: Swift.String)
    @objc public func setFaceInstructionsTop2(_ text: Swift.String)
    @objc public func setFaceInstructionsNoGlasses(_ text: Swift.String)
    @objc public func setFaceInstructionsBrightLight(_ text: Swift.String)
    @objc public func setFaceInstructionsNoHat(_ text: Swift.String)
    @objc public func setFaceInstructionsProceed(_ text: Swift.String)
    @objc public func setFaceInstructionsProceedBackCam(_ text: Swift.String)
    @objc public func setCloseAlertTitle(_ text: Swift.String)
    @objc public func setCloseAlertDesc(_ text: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class HVQRViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension HyperSnapSDK.HVQRViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
@_hasMissingDesignatedInitializers @objc public class HVResponse : ObjectiveC.NSObject {
  @objc public var apiResult: [Swift.String : Swift.AnyObject]? {
    get
  }
  @objc public var apiHeaders: [Swift.String : Swift.String]? {
    get
  }
  @objc public var action: Swift.String? {
    get
  }
  @objc public var imageUri: Swift.String? {
    get
  }
  @objc public var fullImageUri: Swift.String? {
    get
  }
  @objc public var attemptsCount: Swift.Int {
    get
  }
  @objc public var retakeMessage: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVDocConfig : HyperSnapSDK.HVBaseConfig {
  @objc public var textConfig: HyperSnapSDK.HVDocConfig.DocTextConfig
  @objc public func setDocumentType(_ type: HyperSnapSDK.HyperSnapParams.DocumentType)
  @objc public func setAspectRatio(_ aspectRatio: Swift.Double)
  @objc public func setShouldShowReviewPage(_ shouldShow: Swift.Bool)
  @objc public func setShouldShowInstructionsPage(_ shouldShow: Swift.Bool)
  @objc public func setCustomLoadingScreen(_ vc: UIKit.UIViewController)
  @objc public func setShouldShowFlashButton(_ shouldShow: Swift.Bool)
  @objc public func setShouldAddPadding(_ shouldAdd: Swift.Bool)
  @objc public func setDefaultPadding(_ defaultPadding: CoreGraphics.CGFloat)
  @objc public func setShouldShowFullScreenViewController(_ shouldShow: Swift.Bool)
  @objc public func setCaptureButtonEnabledImage(_ image: UIKit.UIImage)
  @available(*, deprecated, message: "This function is not necessary anymore")
  @objc public func setNavigationController(_ navVC: UIKit.UINavigationController)
  @objc public func setShouldDismissVCAutomatically(_ shouldDismiss: Swift.Bool)
  @objc public func setShouldHandleRetries(_ shouldHandle: Swift.Bool)
  @objc public func setShouldReadQR(_ shouldRead: Swift.Bool)
  @objc public func setEnableDocumentUpload(_ enable: Swift.Bool)
  @objc public func setOCRAPIDetails(_ endpoint: Swift.String, documentSide: HyperSnapSDK.HVDocConfig.DocumentSide, params: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?)
  @objc public enum DocumentSide : Swift.Int {
    case front
    case back
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers @objc public class DocTextConfig : ObjectiveC.NSObject {
    @objc public func setDocCaptureTitle(_ text: Swift.String)
    @objc public func setDocCaptureSubtitle(_ text: Swift.String)
    @objc public func setDocCaptureDescription(_ text: Swift.String)
    @objc public func setDocCaptureSubText(_ text: Swift.String)
    @objc public func setDocCaptureActivityText(_ text: Swift.String)
    @objc public func setDocReviewTitle(_ text: Swift.String)
    @objc public func setDocReviewSubtitle(_ text: Swift.String)
    @objc public func setDocReviewDescription(_ text: Swift.String)
    @objc public func setDocReviewRetakeButtonText(_ text: Swift.String)
    @objc public func setDocReviewContinueButtonText(_ text: Swift.String)
    @objc public func setDocRetakePageRetakeButtonText(_ text: Swift.String)
    @objc public func setDocRetakePageTitleText(_ text: Swift.String)
    @objc public func setDocInstructionsTitle(_ text: Swift.String)
    @objc public func setDocInstructions1(_ text: Swift.String)
    @objc public func setDocInstructions2(_ text: Swift.String)
    @objc public func setDocInstructions3(_ text: Swift.String)
    @objc public func setDocInstructionsProceedText(_ text: Swift.String)
    @objc public func setCloseAlertTitle(_ text: Swift.String)
    @objc public func setCloseAlertDesc(_ text: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct HVToast {
  public static func setBackgroundColor(_ color: UIKit.UIColor)
  public static func setMessageColor(_ color: UIKit.UIColor)
  public static func setMessageFont(_ font: UIKit.UIFont)
  public static func setMessageAlignment(_ alignment: UIKit.NSTextAlignment)
  public static func setCornerRadius(_ radius: CoreGraphics.CGFloat)
}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.RawRepresentable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.Equatable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.Hashable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.RawRepresentable {}
