// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HyperSnapSDK
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import CommonCrypto
import CoreGraphics
import CoreLocation
import CoreMotion
import CoreText
import Dispatch
import Foundation
@_exported import HyperSnapSDK
import ImageIO
import MobileCoreServices
import ObjectiveC
import Photos
import QuartzCore
import Security
import Swift
import SystemConfiguration
import UIKit
import VideoToolbox
import Vision
import _Concurrency
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class HVBrandingLayout : UIKit.UIStackView {
  @objc @_Concurrency.MainActor(unsafe) public func showBranding(show: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class getValidHexCode {
  @objc deinit
}
public enum Model : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPad5, iPad6, iPad7, iPad8, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: HyperSnapSDK.Model {
    get
  }
}
@_hasMissingDesignatedInitializers public class Events {
  public static let EVENT_HYPERSNAPSDK_INITIALISED: Swift.String
  public static let EVENT_HYPERSNAPSDK_REGION_SELECTION: Swift.String
  public static let EVENT_SENSOR_DATA_POST_SUCCESSFUL: Swift.String
  public static let EVENT_SENSOR_DATA_POST_FAILURE: Swift.String
  public static let EVENT_CAMERA_PERMISSION_REQUESTED: Swift.String
  public static let EVENT_CAMERA_PERMISSION_GRANTED: Swift.String
  public static let EVENT_CAMERA_PERMISSION_DENIED: Swift.String
  public static let EVENT_FACE_FLOW_STARTED: Swift.String
  public static let EVENT_SELFIE_INSTRUCTIONS_SCREEN_ENABLED: Swift.String
  public static let EVENT_SELFIE_INSTRUCTIONS_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_SELFIE_INSTRUCTIONS_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_SELFIE_INSTRUCTIONS_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_SELFIE_INSTRUCTIONS_SCREEN_PROCEED_BUTTON_CLICKED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_SELFIE_CAPTURE_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_SELFIE_CLOSE_CLICKED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_BACK_PRESSED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_BUTTON_CLICKED: Swift.String
  public static let EVENT_SELFIE_RETAKE_LOAD_SUCCESS: Swift.String
  public static let EVENT_SELFIE_RETAKE_LAUNCHED: Swift.String
  public static let EVENT_SELFIE_RETAKE_LOAD_FAILURE: Swift.String
  public static let EVENT_SELFIE_RETAKE_BUTTON_CLICKED: Swift.String
  public static let EVENT_SELFIE_RETAKE_BACK_PRESSED: Swift.String
  public static let EVENT_SELFIE_API_POST: Swift.String
  public static let EVENT_SELFIE_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_SELFIE_API_CALL_FAILED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_SUCCESSFUL: Swift.String
  public static let EVENT_SELFIE_CAPTURE_FAILED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_SAVED: Swift.String
  public static let EVENT_SELFIE_VIDEO_RECORD_SUCCESSFUL: Swift.String
  public static let EVENT_SELFIE_VIDEO_RECORD_FAILED: Swift.String
  public static let EVENT_FLIP_CAMERA_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOC_FLOW_STARTED: Swift.String
  public static let EVENT_DOCUMENT_INSTRUCTIONS_SCREEN_ENABLED: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_DOCUMENT_UPLOAD_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_DOCUMENT_CAPTURE_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_PICKER_SCREEN_CLOSE_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_INSTRUCTIONS_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_DOCUMENT_INSTRUCTIONS_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_DOCUMENT_INSTRUCTIONS_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_DOCUMENT_INSTRUCTIONS_SCREEN_PROCEED_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_DOCUMENT_CLOSE_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_BACK_PRESSED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_API_POST: Swift.String
  public static let EVENT_DOCUMENT_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_DOCUMENT_API_CALL_FAILED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_SUCCESSFUL: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_FAILED: Swift.String
  public static let EVENT_DOCUMENT_CAPTURE_SAVED: Swift.String
  public static let EVENT_FLASH_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_SCREEN_CONFIRM_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_SCREEN_RETAKE_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_REVIEW_BACK_PRESSED: Swift.String
  public static let EVENT_DOCUMENT_RETAKE_SCREEN_LOAD_SUCCESS: Swift.String
  public static let EVENT_DOCUMENT_RETAKE_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_DOCUMENT_RETAKE_SCREEN_LOAD_FAILURE: Swift.String
  public static let EVENT_DOCUMENT_RETAKE_SCREEN_RETAKE_BUTTON_CLICKED: Swift.String
  public static let EVENT_DOCUMENT_RETAKE_BACK_PRESSED: Swift.String
  public static let EVENT_FACE_MATCH_ENABLED: Swift.String
  public static let EVENT_FACE_MATCH_API_POST: Swift.String
  public static let EVENT_FACE_MATCH_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_FACE_MATCH_API_CALL_FAILED: Swift.String
  public static let EVENT_FACE_MATCH_SUCCESS: Swift.String
  public static let EVENT_FACE_MATCH_FAILED: Swift.String
  public static let EVENT_TEXT_MATCH_API_POST: Swift.String
  public static let EVENT_TEXT_MATCH_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_TEXT_MATCH_API_CALL_FAILED: Swift.String
  public static let EVENT_VERIFY_ALIGNMENT_API_POST: Swift.String
  public static let EVENT_VERIFY_ALIGNMENT_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_VERIFY_ALIGNMENT_API_CALL_FAILED: Swift.String
  public static let EVENT_VALIDATION_API_POST: Swift.String
  public static let EVENT_VALIDATION_API_RESPONSE_RECEIVED: Swift.String
  public static let EVENT_VALIDATION_API_CALL_FAILED: Swift.String
  public static let EVENT_USER_SESSION_STARTED: Swift.String
  public static let EVENT_USER_SESSION_ENDED: Swift.String
  public static let EVENT_SELFIE_CAPTURE_ERROR: Swift.String
  public static let EVENT_SELFIE_CAPTURE_CLOSED_BY_USER: Swift.String
  public static let EVENT_SELFIE_LIVENESS_API_SUCCESSFUL: Swift.String
  public static let EVENT_SELFIE_LIVENESS_API_ERROR: Swift.String
  public static let EVENT_COUNTRY_SELECTED: Swift.String
  public static let EVENT_DOCUMENT_SELECTED: Swift.String
  public static let EVENT_ID_FRONT_CAPTURE_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_BACK_CAPTURE_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_FRONT_CAPTURE_REVIEW_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_BACK_CAPTURE_REVIEW_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_CAPTURE_REVIEW_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_CAPTURE_REVIEW_SCREEN_RETAKE: Swift.String
  public static let EVENT_ID_FRONT_INSTRUCTION_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_BACK_INSTRUCTION_SCREEN_LAUNCHED: Swift.String
  public static let EVENT_ID_FRONT_CAPTURE_SCREEN_CLOSED_BY_USER: Swift.String
  public static let EVENT_ID_BACK_CAPTURE_SCREEN_CLOSED_BY_USER: Swift.String
  public static let EVENT_ID_FRONT_CAPTURE_SUCCESSFUL: Swift.String
  public static let EVENT_ID_BACK_CAPTURE_SUCCESSFUL: Swift.String
  public static let EVENT_ID_FRONT_CAPTURE_FAILED: Swift.String
  public static let EVENT_ID_BACK_CAPTURE_FAILED: Swift.String
  public static let EVENT_ID_API_SUCCESSFUL: Swift.String
  public static let EVENT_ID_API_ERROR: Swift.String
  public static let EVENT_DOC_VERIFY_ALIGNMENT_API_SUCCESS: Swift.String
  public static let EVENT_DOC_VERIFY_ALIGNMENT_API_FAILED: Swift.String
  public static let EVENT_TEXT_MATCH_API_CALLED: Swift.String
  public static let EVENT_TEXT_MATCH_API_SUCCESSFUL: Swift.String
  public static let EVENT_TEXT_MATCH_API_FAILED: Swift.String
  public static let EVENT_HARDWARE_ERROR: Swift.String
  public static let EVENT_VALIDATION_API_SUCCESSFUL: Swift.String
  public static let EVENT_VALIDATION_API_FAILED: Swift.String
  public static let EVENT_QR_SCANNER_LAUNCHED: Swift.String
  public static let EVENT_QR_SCANNER_FAILED: Swift.String
  public static let EVENT_QR_PARSE_ERROR: Swift.String
  public static let EVENT_BRANDING_CHECK_API_SUCCESSFUL: Swift.String
  public static let EVENT_BRANDING_CHECK_API_ERROR: Swift.String
  public static let EVENT_REMOTE_CONFIG_API_SUCCESSFUL: Swift.String
  public static let EVENT_REMOTE_CONFIG_API_ERROR: Swift.String
  @objc deinit
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
extension UIKit.UIFont {
  public static func registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers public class HVActiveLiveness : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HVBaseConfig : ObjectiveC.NSObject {
  public var showTrustLogos: Swift.Bool
  public var shouldShowCloseAlert: Swift.Bool
  @objc public func setShowTrustLogos(_ shouldShow: Swift.Bool)
  @objc public func setShouldShowCloseAlert(_ show: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class HVBaseResponse : ObjectiveC.NSObject {
  @objc public var apiResult: [Swift.String : Swift.AnyObject]? {
    get
  }
  @objc public var apiHeaders: [Swift.String : Swift.String]? {
    get
  }
  @objc public var action: Swift.String? {
    get
  }
  @objc public var imageUri: Swift.String? {
    get
  }
  @objc public var fullImageUri: Swift.String? {
    get
  }
  @objc public var videoUri: Swift.String? {
    get
  }
  @objc public var attemptsCount: Swift.Int {
    get
  }
  @objc public var retakeMessage: Swift.String? {
    get
  }
  @objc public var rawBarcode: Swift.String? {
    get
  }
  @objc public var gestureLivenessImageUrls: [Swift.String : [Swift.String]] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVDocConfig : HyperSnapSDK.HVBaseConfig {
  @objc public var textConfig: HyperSnapSDK.HVDocConfig.DocTextConfig
  @objc public func setDocumentType(_ type: HyperSnapSDK.HyperSnapParams.DocumentType)
  @objc public func setAspectRatio(_ aspectRatio: Swift.Double)
  @objc public func setShouldShowReviewPage(_ shouldShow: Swift.Bool)
  @objc public func setShouldShowInstructionsPage(_ shouldShow: Swift.Bool)
  @objc public func setCustomLoadingScreen(_ vc: UIKit.UIViewController)
  @objc public func setShouldShowFlashButton(_ shouldShow: Swift.Bool)
  @objc public func setShouldAddPadding(_ shouldAdd: Swift.Bool)
  @objc public func setDefaultPadding(_ defaultPadding: CoreGraphics.CGFloat)
  @objc public func setShouldShowFullScreenViewController(_ shouldShow: Swift.Bool)
  @objc public func setCaptureButtonEnabledImage(_ image: UIKit.UIImage)
  @objc public func setDocumentCaptureOverlay(_ image: UIKit.UIImage)
  @objc public func setDocumentCaptureOverlayDuration(durationInMS: Swift.Int)
  @available(*, deprecated, message: "This function is not necessary anymore")
  @objc public func setNavigationController(_ navVC: UIKit.UINavigationController)
  @objc public func setShouldDismissVCAutomatically(_ shouldDismiss: Swift.Bool)
  @objc public func setShouldHandleRetries(_ shouldHandle: Swift.Bool)
  @available(*, deprecated, message: "Use setShouldReadNIDQR() instead")
  @objc public func setShouldReadQR(_ shouldRead: Swift.Bool)
  @objc public func setShouldReadNIDQR(_ shouldRead: Swift.Bool)
  @objc public func setShouldReadBarcode(_ shouldRead: Swift.Bool)
  @objc public func setEnableDocumentUpload(_ enable: Swift.Bool)
  @objc public func setOCRAPIDetails(_ endpoint: Swift.String, documentSide: HyperSnapSDK.HVDocConfig.DocumentSide, params: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?)
  @objc public enum DocumentSide : Swift.Int {
    case front
    case back
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_inheritsConvenienceInitializers @objc public class DocTextConfig : ObjectiveC.NSObject {
    @objc public func setTextConfig(_ textJson: [Swift.String : Swift.String])
    @objc public func setDocInstructionsTitle(_ text: Swift.String)
    @objc public func setDocInstructionsDescription(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setDocInstructions1(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setDocInstructions2(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setDocInstructions3(_ text: Swift.String)
    @objc public func setDocInstructionsProceedText(_ text: Swift.String)
    @objc public func setDocInstructionsUploadText(_ text: Swift.String)
    @objc public func setDocCaptureTitle(_ text: Swift.String)
    @objc public func setDocCaptureSubtitle(_ text: Swift.String)
    @objc public func setDocCaptureDescription(_ text: Swift.String)
    @objc public func setDocCaptureSubText(_ text: Swift.String)
    @objc public func setDocCaptureActivityText(_ text: Swift.String)
    @objc public func setDocReviewTitle(_ text: Swift.String)
    @available(*, deprecated, message: "Won't be available after UI/UX revamp")
    @objc public func setDocReviewSubtitle(_ text: Swift.String)
    @objc public func setDocReviewDescription(_ text: Swift.String)
    @objc public func setDocReviewRetakeButtonText(_ text: Swift.String)
    @objc public func setDocReviewContinueButtonText(_ text: Swift.String)
    @objc public func setDocRetakePageRetakeButtonText(_ text: Swift.String)
    @objc public func setDocRetakePageTitleText(_ text: Swift.String)
    @objc public func setDocLoadingTitleText(_ text: Swift.String)
    @objc public func setDocLoadingDescriptionText(_ text: Swift.String)
    @objc public func setCloseAlertTitle(_ text: Swift.String)
    @objc public func setCloseAlertDesc(_ text: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class HVDocsViewController : UIKit.UIViewController, UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vcNew: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, hvDocConfig: HyperSnapSDK.HVDocConfig, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ viewController: UIKit.UIViewController) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) public func setHVDocConfig(_ hvDocConfig: HyperSnapSDK.HVDocConfig)
  @objc deinit
}
extension HyperSnapSDK.HVDocsViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objc public class HVError : ObjectiveC.NSObject {
  public var errorMessage: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  @objc public func getErrorMessage() -> Swift.String
  @objc public func getErrorCode() -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVFaceConfig : HyperSnapSDK.HVBaseConfig {
  @objc public var textConfig: HyperSnapSDK.HVFaceConfig.FaceTextConfig
  @objc public func setLivenessMode(_ livenessMode: HyperSnapSDK.HyperSnapParams.LivenessMode)
  @objc public func setShouldRecordVideo(_ shouldRecordvideo: Swift.Bool)
  @objc public func setFps(_ fps: Swift.Int)
  @objc public func setShouldAutoCapture(_ shouldAutoCapture: Swift.Bool)
  @objc public func setAutoCaptureDuration(_ duration: Swift.Int)
  @objc public func setShowAlertBox(_ shouldShowAlertLabel: Swift.Bool)
  @objc public func setNumberOfFrames(_ numberOfFrames: Swift.Int)
  @objc public func setShouldCheckForActiveLiveness(_ shouldCheck: Swift.Bool)
  @objc public func setTotalGestures(_ totalGestures: Swift.Int)
  @objc public func setShouldShowInstructionsPage(_ shouldShow: Swift.Bool)
  @objc public func setLivenessAPIParameters(_ parameters: [Swift.String : Swift.AnyObject])
  @objc public func setLivenessAPIHeaders(_ headers: [Swift.String : Swift.String])
  @objc public func setShouldEnablePadding(_ shouldEnable: Swift.Bool)
  @objc public func setPadding(left: Swift.Float, right: Swift.Float, top: Swift.Float, bottom: Swift.Float)
  @objc public func setLivenessEndpoint(_ endpoint: Swift.String)
  @objc public func setShouldReturnFullImageUri(_ shouldReturn: Swift.Bool)
  @objc public func setShouldHandleRetries(_ shouldHandle: Swift.Bool)
  @objc public func setShouldUseBackCamera(_ shouldUse: Swift.Bool)
  @objc public func setShouldShowCameraSwitchButton(_ shouldShow: Swift.Bool)
  @objc public func setFaceCaptureCircleSuccessColor(_ color: UIKit.UIColor)
  @objc public func setFaceCaptureCircleFailureColor(_ color: UIKit.UIColor)
  @objc public func setShouldShowFullScreenViewController(_ shouldShow: Swift.Bool)
  @objc public func setCustomLoadingScreen(_ vc: UIKit.UIViewController)
  @objc public func setFaceCaptureOverlay(_ image: UIKit.UIImage)
  @objc public func setFaceCaptureOverlayDuration(durationInMS: Swift.Int)
  @objc public func setCaptureButtonEnabledImage(_ image: UIKit.UIImage)
  @objc public func setCaptureButtonDisabledImage(_ image: UIKit.UIImage)
  @available(*, deprecated, message: "This function is not necessary anymore")
  @objc public func setNavigationController(_ navVC: UIKit.UINavigationController)
  @objc public func setShouldDismissVCAutomatically(_ shouldDismiss: Swift.Bool)
  @objc public func setShouldRejectFaceNotStraight(_ shouldReject: Swift.Bool)
  @_inheritsConvenienceInitializers @objc public class FaceTextConfig : ObjectiveC.NSObject {
    @objc public func setTextConfig(_ textJson: [Swift.String : Swift.String])
    @objc public func setFaceInstructionsTitle(_ text: Swift.String)
    @objc public func setFaceInstructionsDescription(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setFaceInstructionsTop1(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setFaceInstructionsTop2(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setFaceInstructionsNoGlasses(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setFaceInstructionsBrightLight(_ text: Swift.String)
    @available(*, deprecated, message: "Removed in UI/UX upgrade")
    @objc public func setFaceInstructionsNoHat(_ text: Swift.String)
    @objc public func setFaceInstructionsProceed(_ text: Swift.String)
    @objc public func setFaceInstructionsProceedBackCam(_ text: Swift.String)
    @objc public func setFaceCaptureTitle(_ text: Swift.String)
    @objc public func setFaceCaptureTitle2(_ text: Swift.String)
    @available(*, deprecated, message: "Won't be available after UI/UX revamp")
    @objc public func setFaceCaptureSubtitle(_ text: Swift.String)
    @objc public func setFaceCaptureMultipleFacesDetectedText(_ text: Swift.String)
    @objc public func setFaceCaptureWrongOrientationText(_ text: Swift.String)
    @objc public func setFaceCaptureFaceFoundText(_ text: Swift.String)
    @objc public func setFaceCaptureLookStraight(_ text: Swift.String)
    @objc public func setFaceCaptureMoveAwayText(_ text: Swift.String)
    @objc public func setFaceCaptureMoveAwayText2(_ text: Swift.String)
    @objc public func setFaceCaptureMoveCloserText(_ text: Swift.String)
    @objc public func setFaceCaptureMoveCloserText2(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundText(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundText2(_ text: Swift.String)
    @objc public func setFaceCaptureFaceNotFoundToastText(_ text: Swift.String)
    @objc public func setFaceAutoCaptureWaitText(_ text: Swift.String)
    @objc public func setFaceAutoCaptureActionText(_ text: Swift.String)
    @objc public func setFaceLoadingTitleText(_ text: Swift.String)
    @objc public func setFaceLoadingDescriptionText(_ text: Swift.String)
    @objc public func setFaceCaptureActivityText(_ text: Swift.String)
    @objc public func setFaceRetakeButtonText(_ text: Swift.String)
    @objc public func setFaceRetakeTitleText(_ text: Swift.String)
    @objc public func setCloseAlertTitle(_ text: Swift.String)
    @objc public func setCloseAlertDesc(_ text: Swift.String)
    @objc public func setAlertBoxLabelText(_ text: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HVFaceInstructionsViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vc: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public func setHVFaceConfig(_ hvFaceConfig: HyperSnapSDK.HVFaceConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HVFaceViewController : UIKit.UIViewController, UIKit.UIViewControllerTransitioningDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ vc: UIKit.UIViewController) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, hvFaceConfig: HyperSnapSDK.HVFaceConfig, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?, _ viewController: UIKit.UIViewController) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func setHVFaceConfig(_ hvFaceConfig: HyperSnapSDK.HVFaceConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension HyperSnapSDK.HVFaceViewController {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
@_hasMissingDesignatedInitializers public class HVGeoDetails {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVGesturePose : ObjectiveC.NSObject {
  public enum FacePose : Swift.String {
    case lookLeft
    case lookRight
    case lookStraight
    case none
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum GestureState : Swift.Int {
    case newPose
    case authenticatedState
    case validatePose
    case poseMatches
    case poseDoesNotMatch
    case captureInProgress
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum GestureUIState : Swift.Int {
    case newPose
    case poseMatches
    case poseDoesNotMatch
    case stablePose
    case faceNotDetected
    case authenticatedState
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(facePose: HyperSnapSDK.HVGesturePose.FacePose)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HVIPDetails {
  @objc deinit
}
public enum HVCoordinateSpace : Swift.Int, Swift.Codable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class HVNetworkHelper : ObjectiveC.NSObject {
  @objc public static func makeOCRAPICall(endpoint: Swift.String, documentUri: Swift.String, qrCroppedImageUri: Swift.String? = nil, hvDocConfig: HyperSnapSDK.HVDocConfig? = nil, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeFaceMatchCall(faceUri: Swift.String, documentUri: Swift.String, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeFaceMatchAPICall(endpoint: Swift.String, image1: Swift.String, image2: Swift.String, faceMatchMode: HyperSnapSDK.HyperSnapParams.FaceMatchMode, parameters: [Swift.String : Swift.AnyObject]?, headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc public static func makeTextMatchAPICall(endpoint: Swift.String, parameters: [Swift.String : Swift.AnyObject], headers: [Swift.String : Swift.String]?, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ response: HyperSnapSDK.HVResponse?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVQRConfig : HyperSnapSDK.HVBaseConfig {
  @objc public func setShouldShowInstructionsPage(_ shouldShow: Swift.Bool)
  @objc public func setSkipButtonDelay(_ skipDelay: Swift.Int)
  @objc public var textConfig: HyperSnapSDK.HVQRConfig.HVQRTextConfig
  @_inheritsConvenienceInitializers @objc public class HVQRTextConfig : ObjectiveC.NSObject {
    @objc public func setTextConfig(_ textJson: [Swift.String : Swift.String])
    @objc public func setQrCaptureSubText(_ text: Swift.String)
    @objc public func setQrCaptureTitle(_ text: Swift.String)
    @objc public func setQrInstructionsTitle(_ text: Swift.String)
    @objc public func setQrCaptureDescription(_ text: Swift.String)
    @objc public func setQrInstructionsDescription(_ text: Swift.String)
    @objc public func setQrInstructionsProceedText(_ text: Swift.String)
    @objc public func setQrCaptureSkipButtonText(_ text: Swift.String)
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class HVQRInstructionsViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setHVQRConfig(hvQRConfig: HyperSnapSDK.HVQRConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class HVQRViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) public var completionHandler: (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void
  @objc @_Concurrency.MainActor(unsafe) public static func start(_ callingVC: UIKit.UIViewController, hvQRConfig: HyperSnapSDK.HVQRConfig, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func setHVQRConfig(hvQRConfig: HyperSnapSDK.HVQRConfig)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension HyperSnapSDK.HVQRViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @_Concurrency.MainActor(unsafe) @objc get
  }
}
extension HyperSnapSDK.HVQRViewController : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class HVResponse : HyperSnapSDK.HVBaseResponse {
  @objc public var retakeAttemptResponses: [HyperSnapSDK.HVBaseResponse] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HVSessionResponse : ObjectiveC.NSObject {
  @objc public var hvError: HyperSnapSDK.HVError? {
    get
  }
  @objc public func isSuccess() -> Swift.Bool
  @objc public func getHVError() -> HyperSnapSDK.HVError?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVPrimaryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVSecondaryButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVCameraButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setImageTintColor(_ color: UIKit.UIColor)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVQRSkipButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVTitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVAlertTextLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVRetakeMessageLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVStatusLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) public class HVSubTextLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVRetakeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVErrorRetakeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewRetakeButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewContinueButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocInstructionsProceedButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocInstructionsUploadButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVInstructionsProceedButton : UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBackgroundColor(_ color: CoreGraphics.CGColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setBorderWidth(_ width: CoreGraphics.CGFloat)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowColor(_ color: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc @_Concurrency.MainActor(unsafe) public static func setTitleFont(_ font: UIKit.UIFont)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewTitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocReviewDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVPageNumberLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVSubtitleLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVFaceDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVFaceInstructionTopLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVFaceInstructionBottomLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocInstructionsLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocSubTextLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func drawText(in rect: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @_Concurrency.MainActor(unsafe) @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVDocDescriptionA4Label : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVFaceActivityLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVFaceActivityIndicator : UIKit.UIActivityIndicatorView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setStyle(_ style: UIKit.UIActivityIndicatorView.Style)
  @objc @_Concurrency.MainActor(unsafe) public static func setColor(_ color: UIKit.UIColor)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVErrorRetakeLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
@available(*, deprecated, message: "Use UIConfig for UI cusomtisation")
@objc @_Concurrency.MainActor(unsafe) public class HVQRDescriptionLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public static func setFont(_ font: UIKit.UIFont)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextAlignment(_ alignment: UIKit.NSTextAlignment)
  @objc @_Concurrency.MainActor(unsafe) public static func setTextColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowColor(_ color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) public static func setShadowOffset(_ offset: CoreGraphics.CGSize)
  @objc deinit
}
public struct HVUIAlignment : Swift.Codable {
  public var titleTextAlignment: Swift.String
  public var descriptionTextAlignment: Swift.String
  public var statusTextAlignment: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIAnimation : Swift.Codable {
  @available(*, deprecated, message: "Use documentInstructionFrontSideLottie in the future")
  public var documentInstructionLottie: Swift.String?
  public var documentInstructionFrontSideLottie: Swift.String?
  public var documentInstructionBackSideLottie: Swift.String?
  public var documentProcessingLottie: Swift.String?
  public var documentSuccessLottie: Swift.String?
  public var documentFailureLottie: Swift.String?
  public var faceInstructionLottie: Swift.String?
  public var faceProcessingLottie: Swift.String?
  public var faceSuccessLottie: Swift.String?
  public var faceFailureLottie: Swift.String?
  public var endStateProcessing: Swift.String?
  public var endStateSuccess: Swift.String?
  public var endStateFailure: Swift.String?
  public var uploadFailure: Swift.String?
  public var qrInstruction: Swift.String?
  public func initAnimation()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIBorderRadius : Swift.Codable {
  public var primaryButtonRadius: Swift.Float
  public var secondaryButtonRadius: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIColor : Swift.Codable {
  public var titleTextColor: Swift.String
  public var descriptionTextColor: Swift.String
  public var documentSideHintTextColor: Swift.String
  public var statusTextColor: Swift.String
  public var primaryButtonBackgroundColor: Swift.String
  public var primaryButtonTextColor: Swift.String
  public var primaryButtonBorderColor: Swift.String
  public var secondaryButtonBackgroundColor: Swift.String
  public var secondaryButtonTextColor: Swift.String
  public var secondaryButtonBorderColor: Swift.String
  public var captureButtonColor: Swift.String
  public var animationsPrimaryColor: Swift.String?
  public var retakeMessageColor: Swift.String
  public var alertTextBoxTextColor: Swift.String
  public var alertTextBoxBorderColor: Swift.String
  public var alertTextBoxBackgroundColor: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIConfig : Swift.Codable {
  public var colors: HyperSnapSDK.HVUIColor
  public var font: HyperSnapSDK.HVUIFont
  public var fontWeight: HyperSnapSDK.HVUIFontWeight
  public var fontSize: HyperSnapSDK.HVUIFontSize
  public var alignment: HyperSnapSDK.HVUIAlignment
  public var borderRadius: HyperSnapSDK.HVUIBorderRadius
  public var animation: HyperSnapSDK.HVUIAnimation
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIFont : Swift.Codable {
  public var titleTextFont: Swift.String
  public var descTextFont: Swift.String
  public var statusTextFont: Swift.String
  public var documentSideHintTextFont: Swift.String
  public var retakeMessageFont: Swift.String
  public var primaryButtonFont: Swift.String
  public var secondaryButtonFont: Swift.String
  public var alertTextBoxTextFont: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIFontSize : Swift.Codable {
  public var titleTextSize: Swift.Float
  public var descriptionTextSize: Swift.Float
  public var statusTextSize: Swift.Float
  public var documentSideHintTextSize: Swift.Float
  public var retakeMessageTextSize: Swift.Float
  public var primaryButtonTextSize: Swift.Float
  public var secondaryButtonTextSize: Swift.Float
  public var alertTextBoxTextSize: Swift.Float
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HVUIFontWeight : Swift.Codable {
  public var titleTextFontWeight: Swift.String
  public var descTextFontWeight: Swift.String
  public var statusTextFontWeight: Swift.String
  public var documentSideHintTextFontWeight: Swift.String
  public var retakeMessageFontWeight: Swift.String
  public var primaryButtonFontWeight: Swift.String
  public var secondaryButtonFontWeight: Swift.String
  public var alertTextBoxTextFontWeight: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class HyperSnapSDKConfig : ObjectiveC.NSObject {
  @objc public static func initialize(appId: Swift.String, appKey: Swift.String, region: HyperSnapSDK.HyperSnapParams.Region)
  @objc public static func initialize(appId: Swift.String, accessToken: Swift.String, region: HyperSnapSDK.HyperSnapParams.Region)
  @objc public static func logEvent(_ name: Swift.String, _ properties: [Swift.String : Any])
  @objc public static func setShouldUseSignature(_ shouldUseSignature: Swift.Bool)
  @objc public static func setShouldEnableSSLPinning(_ shouldEnableSSLPinning: Swift.Bool)
  @objc public static func setShouldUseAnalytics(_ shouldUse: Swift.Bool)
  @objc public static func setShouldUseSensorBiometrics(_ shouldUse: Swift.Bool)
  @objc public static func setTimeoutIntervalForRequest(_ timeout: Swift.Double)
  public static func setUiConfig(_ uiConfig: HyperSnapSDK.HVUIConfig?)
  @objc public static func setBrandingCheck(_ shouldCheck: Swift.Bool, completionHandler: @escaping (_ error: HyperSnapSDK.HVError?, _ result: [Swift.String : Swift.AnyObject]?) -> Swift.Void)
  @objc public static func setShouldReturnRawResponse(_ shouldReturn: Swift.Bool)
  @objc public static func deleteImageAtUri(_ imageUri: Swift.String)
  @objc public static func sortDictionaryAlphabetically(_ dictionary: [Swift.String : Swift.AnyObject]) -> Swift.String
  @objc public static func startUserSession(_ transactionId: Swift.String? = nil) -> HyperSnapSDK.HVSessionResponse
  @objc public static func endUserSession()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class HyperSnapParams : ObjectiveC.NSObject {
  @objc public enum DocumentType : Swift.Int {
    case card
    case a4
    case passport
    case other
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Region : Swift.Int {
    case AsiaPacific
    case UnitedStates
    case India
    case Africa
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum Product : Swift.Int {
    case faceID
    case IAM
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum LivenessMode : Swift.Int {
    case none
    case textureLiveness
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum FaceMatchMode : Swift.Int {
    case Face_Id
    case Face_Face
    case Face_IdFaceString
    case Generic
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Keys {
  public static let HV_EVENT: Swift.String
  public static let SDK_INITIALISATION_TIMESTAMP: Swift.String
  public static let IP_ADDRESS: Swift.String
  public static let TIME_SPENT: Swift.String
  public static let IMAGE_BASE_64: Swift.String
  public static let TRANSACTION_ID: Swift.String
  public static let STATE: Swift.String
  public static let RESPONSE: Swift.String
  public static let STATUS_CODE: Swift.String
  public static let RESPONSE_TIME: Swift.String
  public static let ACTION: Swift.String
  public static let DOCUMENT_SIDE: Swift.String
  public static let IMAGE_SIZE: Swift.String
  public static let IMAGE_FORMAT: Swift.String
  public static let VIDEO_SIZE: Swift.String
  public static let VIDEO_FORMAT: Swift.String
  public static let VIDEO_DURATION: Swift.String
  public static let NUMBER_OF_FACE_RETRY_ATTEMPTS: Swift.String
  public static let NUMBER_OF_DOCUMENT_RETAKE_ATTEMPTS: Swift.String
  public static let NUMBER_OF_DOCUMENT_RETRY_ATTEMPTS: Swift.String
  public static let API_URL: Swift.String
  public static let CONTENT_TYPE: Swift.String
  public static let FORM_DATA: Swift.String
  public static let FACE_EVENT: Swift.String
  public static let DOC_EVENT: Swift.String
  public static let NETWORK_EVENT: Swift.String
  public static let SSL_PINNING_ENABLED: Swift.String
  public static let USE_BRANDING: Swift.String
  public static let RAW_RESPONSE_ENABLED: Swift.String
  public static let USE_SIGNATURE: Swift.String
  public static let CONNECT_TIMEOUT: Swift.String
  public static let READ_TIMEOUT: Swift.String
  public static let WRITE_TIMEOUT: Swift.String
  public static let TRANSACTION_ID_SET_BY_CLIENT: Swift.String
  public static let INIT_REGION: Swift.String
  public static let REGION: Swift.String
  public static let SHOW_INSTRUCTIONS_PAGE: Swift.String
  public static let ENABLE_PADDING: Swift.String
  public static let USE_BACK_CAMERA: Swift.String
  public static let SHOW_CAMERA_SWITCH: Swift.String
  public static let RETURN_FULL_IMAGE_URI: Swift.String
  public static let REJECT_FACE_NOT_STRAIGHT: Swift.String
  public static let LIVENESS_MODE: Swift.String
  public static let CLIENT_ID: Swift.String
  public static let REFERENCE_ID: Swift.String
  public static let ATTEMPTS: Swift.String
  public static let ERROR_CODE: Swift.String
  public static let ERROR_MESSAGE: Swift.String
  public static let DATA_LOGGING: Swift.String
  public static let REQUEST_ID: Swift.String
  public static let TIME_TAKEN_FOR_API_CALL: Swift.String
  public static let LIVENESS_SCORE: Swift.String
  public static let LIVE: Swift.String
  public static let TO_BE_REVIEWED: Swift.String
  public static let SHOW_REVIEW_PAGE: Swift.String
  public static let ADD_PADDING: Swift.String
  public static let DOCUMENT_TYPE: Swift.String
  public static let ASPECT_RATIO: Swift.String
  public static let SHOW_FLASH_BUTTON: Swift.String
  public static let IS_FLASH_ON: Swift.String
  public static let API_END_POINT: Swift.String
  public static let FACE_MATCH_MODE: Swift.String
  public static let APP_ID: Swift.String
  public static let APP_NAME: Swift.String
  public static let DEVICE_NAME: Swift.String
  public static let DEVICE_MODEL: Swift.String
  public static let SDK_VERSION: Swift.String
  public static let APP_BUILD_NUMBER: Swift.String
  public static let APP_VERSION: Swift.String
  public static let OS_VERSION: Swift.String
  public static let VENDOR_IDENTIFIER: Swift.String
  public static let SCREEN_WIDTH: Swift.String
  public static let SCREEN_HEIGHT: Swift.String
  public static let DISTINCT_ID: Swift.String
  public static let TIME: Swift.String
  public static let CURRENT_TIME: Swift.String
  @objc deinit
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
public struct HVToast {
  public static func setBackgroundColor(_ color: UIKit.UIColor)
  public static func setMessageColor(_ color: UIKit.UIColor)
  public static func setMessageFont(_ font: UIKit.UIFont)
  public static func setMessageAlignment(_ alignment: UIKit.NSTextAlignment)
  public static func setCornerRadius(_ radius: CoreGraphics.CGFloat)
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
}
extension HyperSnapSDK.Model : Swift.Equatable {}
extension HyperSnapSDK.Model : Swift.Hashable {}
extension HyperSnapSDK.Model : Swift.RawRepresentable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.Equatable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.Hashable {}
extension HyperSnapSDK.HVDocConfig.DocumentSide : Swift.RawRepresentable {}
extension HyperSnapSDK.HVGesturePose.FacePose : Swift.Equatable {}
extension HyperSnapSDK.HVGesturePose.FacePose : Swift.Hashable {}
extension HyperSnapSDK.HVGesturePose.FacePose : Swift.RawRepresentable {}
extension HyperSnapSDK.HVGesturePose.GestureState : Swift.Equatable {}
extension HyperSnapSDK.HVGesturePose.GestureState : Swift.Hashable {}
extension HyperSnapSDK.HVGesturePose.GestureState : Swift.RawRepresentable {}
extension HyperSnapSDK.HVGesturePose.GestureUIState : Swift.Equatable {}
extension HyperSnapSDK.HVGesturePose.GestureUIState : Swift.Hashable {}
extension HyperSnapSDK.HVGesturePose.GestureUIState : Swift.RawRepresentable {}
extension HyperSnapSDK.HVCoordinateSpace : Swift.Equatable {}
extension HyperSnapSDK.HVCoordinateSpace : Swift.Hashable {}
extension HyperSnapSDK.HVCoordinateSpace : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.DocumentType : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.Region : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.Product : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.LivenessMode : Swift.RawRepresentable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.Equatable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.Hashable {}
extension HyperSnapSDK.HyperSnapParams.FaceMatchMode : Swift.RawRepresentable {}
